{"ast":null,"code":"var _jsxFileName = \"/home/daniella/\\xC1rea de Trabalho/Trybe_Exercicios/bloco15-dia4-actions-assincronas/exercise-game-of-thrones-characters/src/components/CharacterInfo.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\n\nclass CharacterInfo extends React.Component {\n  render() {\n    const {\n      name,\n      gender,\n      aliases,\n      books\n    } = this.props;\n    console.log(name);\n    console.log(gender);\n    console.log(aliases);\n    console.log(books);\n    return /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 7\n      }\n    }, \"Teste\"); // const { name, gender, aliases, books, loading, error } = this.props;\n    // if (!loading) {\n    //   return (\n    //     <ul>\n    //       <li>Name: {name}</li>\n    //       <li>Gender: {gender}</li>\n    //       <li>Aliases: {aliases.map((alias, index) => <p key={`${alias}-${index}`}>{alias}</p>)}</li>\n    //       <li>Books: {books.map((book, index) => <p key={`${book}-${index}`}>{book}</p>)}</li>\n    //     </ul>\n    //   )\n    // }\n    // if (error) { return <div>{error}</div>; }\n    // if (loading) { return <div>Loading...</div>; }\n    // return <div>Type a character name and click to search!</div>;\n  }\n\n}\n\n; //mapeie o estado global para a propriedade da sua aplicação\n\nconst mapStateToProps = state => ({\n  name: state.reducerFetch.name,\n  gender: state.reducerFetch.gender,\n  aliases: state.reducerFetch.aliases,\n  books: state.reducerFetch.books,\n  loading: state.reducerFetch.loading,\n  error: state.reducerFetch.error\n}); // conecte este componente ao redux aqui\n\n\nexport default connect(mapStateToProps)(CharacterInfo); //faça as propTypes\n\nCharacterInfo.propTypes = {\n  loading: propTypes.bool.isRequired,\n  character: propTypes.arrayOf(propTypes.object),\n  error: propTypes.string\n};","map":{"version":3,"sources":["/home/daniella/Área de Trabalho/Trybe_Exercicios/bloco15-dia4-actions-assincronas/exercise-game-of-thrones-characters/src/components/CharacterInfo.js"],"names":["React","connect","propTypes","CharacterInfo","Component","render","name","gender","aliases","books","props","console","log","mapStateToProps","state","reducerFetch","loading","error","bool","isRequired","character","arrayOf","object","string"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,aAAN,SAA4BH,KAAK,CAACI,SAAlC,CAA4C;AAC1CC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,MAAR;AAAgBC,MAAAA,OAAhB;AAAyBC,MAAAA;AAAzB,QAAmC,KAAKC,KAA9C;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYN,IAAZ;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYL,MAAZ;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,CANO,CASP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AAxByC;;AAyB3C,C,CAED;;AACA,MAAMI,eAAe,GAAIC,KAAD,KAAY;AAClCR,EAAAA,IAAI,EAAEQ,KAAK,CAACC,YAAN,CAAmBT,IADS;AAElCC,EAAAA,MAAM,EAAEO,KAAK,CAACC,YAAN,CAAmBR,MAFO;AAGlCC,EAAAA,OAAO,EAAEM,KAAK,CAACC,YAAN,CAAmBP,OAHM;AAIlCC,EAAAA,KAAK,EAAEK,KAAK,CAACC,YAAN,CAAmBN,KAJQ;AAKlCO,EAAAA,OAAO,EAAEF,KAAK,CAACC,YAAN,CAAmBC,OALM;AAMlCC,EAAAA,KAAK,EAAEH,KAAK,CAACC,YAAN,CAAmBE;AANQ,CAAZ,CAAxB,C,CASA;;;AACA,eAAehB,OAAO,CAACY,eAAD,CAAP,CAAyBV,aAAzB,CAAf,C,CACA;;AACAA,aAAa,CAACD,SAAd,GAA0B;AACxBc,EAAAA,OAAO,EAAEd,SAAS,CAACgB,IAAV,CAAeC,UADA;AAExBC,EAAAA,SAAS,EAAElB,SAAS,CAACmB,OAAV,CAAkBnB,SAAS,CAACoB,MAA5B,CAFa;AAGxBL,EAAAA,KAAK,EAAEf,SAAS,CAACqB;AAHO,CAA1B","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\n\nclass CharacterInfo extends React.Component {\n  render() {\n    const { name, gender, aliases, books } = this.props;\n    console.log(name);\n    console.log(gender);\n    console.log(aliases);\n    console.log(books);\n    return(\n      <p>Teste</p>\n    )\n    // const { name, gender, aliases, books, loading, error } = this.props;\n    // if (!loading) {\n    //   return (\n    //     <ul>\n    //       <li>Name: {name}</li>\n    //       <li>Gender: {gender}</li>\n    //       <li>Aliases: {aliases.map((alias, index) => <p key={`${alias}-${index}`}>{alias}</p>)}</li>\n    //       <li>Books: {books.map((book, index) => <p key={`${book}-${index}`}>{book}</p>)}</li>\n    //     </ul>\n    //   )\n    // }\n    // if (error) { return <div>{error}</div>; }\n    // if (loading) { return <div>Loading...</div>; }\n    // return <div>Type a character name and click to search!</div>;\n  }\n};\n\n//mapeie o estado global para a propriedade da sua aplicação\nconst mapStateToProps = (state) => ({\n  name: state.reducerFetch.name,\n  gender: state.reducerFetch.gender,\n  aliases: state.reducerFetch.aliases,\n  books: state.reducerFetch.books,\n  loading: state.reducerFetch.loading,\n  error: state.reducerFetch.error,\n});\n\n// conecte este componente ao redux aqui\nexport default connect(mapStateToProps)(CharacterInfo);\n//faça as propTypes\nCharacterInfo.propTypes = {\n  loading: propTypes.bool.isRequired,\n  character: propTypes.arrayOf(propTypes.object),\n  error: propTypes.string,\n};\n"]},"metadata":{},"sourceType":"module"}