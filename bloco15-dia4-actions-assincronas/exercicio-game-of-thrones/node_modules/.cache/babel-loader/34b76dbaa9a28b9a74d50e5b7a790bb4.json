{"ast":null,"code":"import charAPI from \"../services/charAPI\";\nexport const REQUEST_LOADING = 'REQUEST_LOADING';\nexport const GET_CHARACTER = 'GET_CHARACTER';\nexport const ERROR = 'ERROR';\n\nconst requestLoading = () => ({\n  type: REQUEST_LOADING\n});\n\nconst getCharacter = resultAPI => ({\n  type: GET_CHARACTER,\n  resultAPI\n});\n\nconst getError = () => ({\n  type: ERROR\n});\n\nexport const fetchCharacter = nameType => {\n  return async dispatch => {\n    try {\n      dispatch(requestLoading());\n      const api = await charAPI(nameType);\n      dispatch(getCharacter(api[0]));\n    } catch (error) {\n      dispatch(getError());\n    }\n  };\n};","map":{"version":3,"sources":["/home/daniella/Área de Trabalho/Trybe_Exercicios/bloco15-dia4-actions-assincronas/exercise-game-of-thrones-characters/src/actions/actions.js"],"names":["charAPI","REQUEST_LOADING","GET_CHARACTER","ERROR","requestLoading","type","getCharacter","resultAPI","getError","fetchCharacter","nameType","dispatch","api","error"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,qBAApB;AAEA,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,MAAMC,KAAK,GAAG,OAAd;;AAEP,MAAMC,cAAc,GAAG,OAAO;AAAEC,EAAAA,IAAI,EAAEJ;AAAR,CAAP,CAAvB;;AAEA,MAAMK,YAAY,GAAIC,SAAD,KAAgB;AAAEF,EAAAA,IAAI,EAAEH,aAAR;AAAuBK,EAAAA;AAAvB,CAAhB,CAArB;;AAEA,MAAMC,QAAQ,GAAG,OAAO;AAAEH,EAAAA,IAAI,EAAEF;AAAR,CAAP,CAAjB;;AAEA,OAAO,MAAMM,cAAc,GAAIC,QAAD,IAAc;AAC1C,SAAO,MAAOC,QAAP,IAAoB;AACzB,QAAI;AACFA,MAAAA,QAAQ,CAACP,cAAc,EAAf,CAAR;AACA,YAAMQ,GAAG,GAAG,MAAMZ,OAAO,CAACU,QAAD,CAAzB;AACAC,MAAAA,QAAQ,CAACL,YAAY,CAACM,GAAG,CAAC,CAAD,CAAJ,CAAb,CAAR;AACD,KAJD,CAIE,OAAOC,KAAP,EAAc;AACdF,MAAAA,QAAQ,CAACH,QAAQ,EAAT,CAAR;AACD;AACF,GARD;AASD,CAVM","sourcesContent":["import charAPI from \"../services/charAPI\";\n\nexport const REQUEST_LOADING = 'REQUEST_LOADING';\nexport const GET_CHARACTER = 'GET_CHARACTER';\nexport const ERROR = 'ERROR';\n\nconst requestLoading = () => ({ type: REQUEST_LOADING });\n\nconst getCharacter = (resultAPI) => ({ type: GET_CHARACTER, resultAPI });\n\nconst getError = () => ({ type: ERROR });\n\nexport const fetchCharacter = (nameType) => {\n  return async (dispatch) => {\n    try {\n      dispatch(requestLoading());\n      const api = await charAPI(nameType);\n      dispatch(getCharacter(api[0]))     \n    } catch (error) {\n      dispatch(getError());\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}